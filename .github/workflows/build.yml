name: Build and Push Derived Images

on:
  workflow_dispatch:
#  schedule:
#    - cron: "0 2 * * *"

jobs:
  get-tags:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.set-matrix.outputs.tags }}
    steps:
      - name: Get tags from Docker Hub
        id: get
        run: |
          NOW=$(date +%s)
          CUTOFF=$(date -d "-60 days" +%s)

          # All non-scratch tags, younger than 2 months
          curl -s "https://hub.docker.com/v2/repositories/garethgeorge/backrest/tags?page_size=100" \
            | jq -r --argjson cutoff $CUTOFF '
                .results[]
                | select(.name | contains("scratch") | not)
                | select((.last_updated | sub("Z";"") | fromdateiso8601) >= $cutoff)
                | .name
              ' > tags.txt
          echo "Filtered tags:"
          cat tags.txt

      - name: Set matrix output
        id: set-matrix
        run: |
          TAGS=$(jq -R -s -c 'split("\n")[:-1]' tags.txt)
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

  build:
    needs: get-tags
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJson(needs.get-tags.outputs.tags) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get upstream digest per tag
        id: digest
        run: |
          DIGEST=$(docker buildx imagetools inspect garethgeorge/backrest:${{ matrix.tag }} --raw | jq -r '.Digest')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Check cache
        id: cache
        uses: actions/cache@v4
        with:
          path: .digest-cache
          key: ${{ runner.os }}-${{ matrix.tag }}-${{ steps.digest.outputs.digest }}

      - name: Skip if cached
        if: steps.cache.outputs.cache-hit == 'true'
        run: echo "Upstream unchanged, skipping build."

      - name: Set up QEMU
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine architectures
        id: arch
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Querying available architectures..."
          ARCHS=$(docker buildx imagetools inspect garethgeorge/backrest:${{ matrix.tag }} --raw \
            | jq -r 'if has("Manifests") then [.Manifests[].Platform.architecture] | unique | join(",") else "amd64" end')
          echo "archs=$ARCHS" >> $GITHUB_OUTPUT

      - name: Prepare platforms
        id: platforms
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # ARCHS kommt von vorherigem Schritt
          PLATFORMS=$(echo "${{ steps.arch.outputs.archs }}" | sed 's/,/\,linux\//g' | sed 's/^/linux\//')
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT

      - name: Build and Push
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ matrix.tag }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          build-args: |
            BASE_IMAGE=garethgeorge/backrest:${{ matrix.tag }}
